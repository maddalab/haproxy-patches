From 216a5e24d486bc7f3a74e6b8efd24cb4569c84ea Mon Sep 17 00:00:00 2001
From: Bhaskar Maddala <bhaskar@tumblr.com>
Date: Fri, 11 Jul 2014 13:35:21 -0400
Subject: [PATCH] Add ability to externalize health check

Summary:
We add new directives to the http-check keyword

The server option is used to specify an external
health checking server to use for health checks.

Example:
    http-check server <ipv4|ipv6>

The info option is used to specify a http
header to communicate information about the server
being checked to the external health checking server

Example:
    http-check info [header <http-header>]

The default value of the header is 'X-Check-Info'

This option is independent of the server directive. When
used includes a http header in the health check request
of the form

<http-header>: <value>

Finally, we add to the server directive a 'info'
option. This value assigned to this option is passed
to the external health checking server.

Example:
    server id <addr> [info <value>]

Putting it all togeather

backend bck1
    mode http

    # the host header works but wasn't the intent
    option      httpchk   GET /health HTTP/1.1\r\nHost:\ www.hst1.com

    # specify a server to use for the check
    http-check  server chksrv1.dc.hst1.com

    # request for info about the server using the default host header
    # the following 2 lines are equivalent
    # http-check info
    http-check  info X-Check-Info

    # pass in the info using the default
    # the following 2 lines are equivalent
    # server a1 a1.dc.hst1.com:80 weight 20 maxconn 5 check inter 2s
    server a1 a1.dc.hst1.com:80 weight 20 maxconn 5 check inter 2s info a1

    # this is probably a better alternative
    server a1 a1.dc.hst1.com:80 weight 20 maxconn 5 check inter 2s info a1.dc.hst1.com
---
 doc/configuration.txt     |  41 +++++++++++++--
 include/common/defaults.h |   1 +
 include/types/proxy.h     |   8 ++-
 include/types/server.h    |   3 ++
 src/cfgparse.c            | 128 ++++++++++++++++++++++++++++++++++++----------
 src/checks.c              | 107 +++++++++++++++++++++-----------------
 src/server.c              |  15 +++++-
 7 files changed, 222 insertions(+), 81 deletions(-)

diff --git a/doc/configuration.txt b/doc/configuration.txt
index 080d8fc..54bb0d2 100644
--- a/doc/configuration.txt
+++ b/doc/configuration.txt
@@ -1288,6 +1288,8 @@ force-persist                             -          X         X         X
 fullconn                                  X          -         X         X
 grace                                     X          X         X         X
 hash-type                                 X          -         X         X
+http-check server                         X          -         X         X
+http-check info                           X          -         X         X
 http-check disable-on-404                 X          -         X         X
 http-check expect                         -          -         X         X
 http-check send-state                     X          -         X         X
@@ -2752,7 +2754,33 @@ http-check disable-on-404
   is used with "http-check expect", then it has precedence over it so that 404
   responses will still be considered as soft-stop.
 
-  See also : "option httpchk", "http-check expect"
+  See also : "option httpchk", "http-check expect", "http-check server",
+             "http-check info"
+
+http-check server <ipv4|ipv6>
+  Using the "server" parameter, it becomes possible to use a different IP address
+  to send health-checks. On some servers, it may be desirable to dedicate an IP
+  address to specific component able to perform complex tests which are more
+  suitable to health-checks than the application.
+
+  May be used in sections :   defaults | frontend | listen | backend
+                                 yes   |    no    |   yes  |   yes
+  Arguments : server
+
+  See also : "option httpchk", "http-check expect", "http-check server",
+             "http-check info"
+
+http-check info <header>
+  Using the "info" parameter, it becomes possible to send custom information
+  for use during health checks. The information is sent when using http checks
+  using the specified http header
+
+  May be used in sections :   defaults | frontend | listen | backend
+                                 yes   |    no    |   yes  |   yes
+  Arguments : header
+
+  See also : "option httpchk", "http-check expect", "http-check server",
+             "http-check info"
 
 
 http-check expect [!] <match> <pattern>
@@ -4307,8 +4335,8 @@ option httpchk <method> <uri> <version>
           server apache1 192.168.1.1:443 check port 80
 
   See also : "option ssl-hello-chk", "option smtpchk", "option mysql-check",
-             "option pgsql-check", "http-check" and the "check", "port" and
-             "inter" server options.
+             "option pgsql-check", "http-check" and the "check", "port",
+             "inter", "server" and "info" server options.
 
 
 option httpclose
@@ -8605,6 +8633,13 @@ addr <ipv4|ipv6>
 
   Supported in default-server: No
 
+info <information>
+  Using the "info" parameter, it becomes possible to send information useful for
+  health-checks. On some servers, it may be desirable to include additional
+  server information to perform complex tests which are more suitable to
+  health-checks than the application. This parameter is ignored if the "check"
+  parameter is not set.
+
 agent-check
   Enable an auxiliary agent check which is run independently of a regular
   health check. An agent health check is performed by making a TCP connection
diff --git a/include/common/defaults.h b/include/common/defaults.h
index c53db08..4cdafac 100644
--- a/include/common/defaults.h
+++ b/include/common/defaults.h
@@ -131,6 +131,7 @@
 #define DEF_SMTP_CHECK_REQ   "HELO localhost\r\n"
 #define DEF_LDAP_CHECK_REQ   "\x30\x0c\x02\x01\x01\x60\x07\x02\x01\x03\x04\x00\x80\x00"
 #define DEF_REDIS_CHECK_REQ  "*1\r\n$4\r\nPING\r\n"
+#define DEF_CHECK_HOST_HDR   "X-Check-Info"
 
 #define DEF_HANA_ONERR		HANA_ONERR_FAILCHK
 #define DEF_HANA_ERRLIMIT	10
diff --git a/include/types/proxy.h b/include/types/proxy.h
index b33b634..2309a46 100644
--- a/include/types/proxy.h
+++ b/include/types/proxy.h
@@ -143,7 +143,8 @@ enum pr_mode {
 #define PR_O2_SRC_ADDR	0x00100000	/* get the source ip and port for logs */
 
 #define PR_O2_FAKE_KA   0x00200000      /* pretend we do keep-alive with server eventhough we close */
-/* unused: 0x00400000 */
+#define PR_O2_CHK_INFO  0x00400000		/* include info header and value in http health checks */
+
 #define PR_O2_EXP_NONE  0x00000000      /* http-check : no expect rule */
 #define PR_O2_EXP_STS   0x00800000      /* http-check expect status */
 #define PR_O2_EXP_RSTS  0x01000000      /* http-check expect rstatus */
@@ -341,7 +342,10 @@ struct proxy {
 	int grace;				/* grace time after stop request */
 	struct list tcpcheck_rules;		/* tcp-check send / expect rules */
 	char *check_req;			/* HTTP or SSL request to use for PR_O_HTTP_CHK|PR_O_SSL3_CHK */
-	int check_len;				/* Length of the HTTP or SSL3 request */
+	int check_req_len;			/* Length of the HTTP or SSL3 request */
+	struct sockaddr_storage check_addr;	/* the address to check */
+	char *check_for_hdr_name;			/* HTTP header used to identify host being checked */
+	int check_for_hdr_name_len;			/* Length of the HTTP header */
 	char *expect_str;			/* http-check expected content : string or text version of the regex */
 	struct my_regex *expect_regex;		/* http-check expected content */
 	struct chunk errmsg[HTTP_ERR_SIZE];	/* default or customized error messages for known errors */
diff --git a/include/types/server.h b/include/types/server.h
index 313f58d..ee67425 100644
--- a/include/types/server.h
+++ b/include/types/server.h
@@ -198,6 +198,9 @@ struct server {
 		struct sockaddr_storage addr;   /* the address to check, if different from <addr> */
 	} check_common;
 
+	char *check_for_hdr_val;                   /* http header value used for health checkes */
+	int check_for_hdr_val_len;                      /* length of the http header value */
+
 	struct check check;                     /* health-check specific configuration */
 	struct check agent;                     /* agent specific configuration */
 
diff --git a/src/cfgparse.c b/src/cfgparse.c
index 762978a..14d4486 100644
--- a/src/cfgparse.c
+++ b/src/cfgparse.c
@@ -1478,7 +1478,7 @@ int cfg_parse_global(const char *file, int linenum, char **args, int kwm)
 				}
 			}
 		}
-		
+
 		Alert("parsing [%s:%d] : unknown keyword '%s' in '%s' section\n", file, linenum, args[0], "global");
 		err_code |= ERR_ALERT | ERR_FATAL;
 	}
@@ -1968,12 +1968,19 @@ int cfg_parse_listen(const char *file, int linenum, char **args, int kwm)
 			curproxy->fullconn = defproxy.fullconn;
 			curproxy->conn_retries = defproxy.conn_retries;
 			curproxy->max_ka_queue = defproxy.max_ka_queue;
+			curproxy->check_addr = defproxy.check_addr;
 
 			if (defproxy.check_req) {
-				curproxy->check_req = calloc(1, defproxy.check_len);
-				memcpy(curproxy->check_req, defproxy.check_req, defproxy.check_len);
+				curproxy->check_req = calloc(1, defproxy.check_req_len);
+				memcpy(curproxy->check_req, defproxy.check_req, defproxy.check_req_len);
+			}
+			curproxy->check_req_len = defproxy.check_req_len;
+
+			if (defproxy.check_for_hdr_name) {
+				curproxy->check_for_hdr_name = calloc(1, defproxy.check_for_hdr_name_len);
+				memcpy(curproxy->check_for_hdr_name, defproxy.check_for_hdr_name, defproxy.check_for_hdr_name_len);
 			}
-			curproxy->check_len = defproxy.check_len;
+			curproxy->check_for_hdr_name_len = defproxy.check_for_hdr_name_len;
 
 			if (defproxy.expect_str) {
 				curproxy->expect_str = strdup(defproxy.expect_str);
@@ -2119,6 +2126,8 @@ int cfg_parse_listen(const char *file, int linenum, char **args, int kwm)
 		free(defproxy.monitor_uri);
 		free(defproxy.defbe.name);
 		free(defproxy.conn_src.iface_name);
+		free(defproxy.check_for_hdr_name);
+		defproxy.check_for_hdr_name_len = 0;
 		free(defproxy.fwdfor_hdr_name);
 		defproxy.fwdfor_hdr_len = 0;
 		free(defproxy.orgto_hdr_name);
@@ -3756,15 +3765,16 @@ stats_error_parsing:
 			/* use HTTP request to check servers' health */
 			free(curproxy->check_req);
 			curproxy->check_req = NULL;
+			curproxy->check_req_len = 0;
 			curproxy->options2 &= ~PR_O2_CHK_ANY;
 			curproxy->options2 |= PR_O2_HTTP_CHK;
 			if (!*args[2]) { /* no argument */
 				curproxy->check_req = strdup(DEF_CHECK_REQ); /* default request */
-				curproxy->check_len = strlen(DEF_CHECK_REQ);
+				curproxy->check_req_len = strlen(DEF_CHECK_REQ);
 			} else if (!*args[3]) { /* one argument : URI */
 				int reqlen = strlen(args[2]) + strlen("OPTIONS  HTTP/1.0\r\n") + 1;
 				curproxy->check_req = (char *)malloc(reqlen);
-				curproxy->check_len = snprintf(curproxy->check_req, reqlen,
+				curproxy->check_req_len = snprintf(curproxy->check_req, reqlen,
 							       "OPTIONS %s HTTP/1.0\r\n", args[2]); /* URI to use */
 			} else { /* more arguments : METHOD URI [HTTP_VER] */
 				int reqlen = strlen(args[2]) + strlen(args[3]) + 3 + strlen("\r\n");
@@ -3772,9 +3782,9 @@ stats_error_parsing:
 					reqlen += strlen(args[4]);
 				else
 					reqlen += strlen("HTTP/1.0");
-		    
+
 				curproxy->check_req = (char *)malloc(reqlen);
-				curproxy->check_len = snprintf(curproxy->check_req, reqlen,
+				curproxy->check_req_len = snprintf(curproxy->check_req, reqlen,
 							       "%s %s %s\r\n", args[2], args[3], *args[4]?args[4]:"HTTP/1.0");
 			}
 		}
@@ -3785,6 +3795,7 @@ stats_error_parsing:
 
 			free(curproxy->check_req);
 			curproxy->check_req = NULL;
+			curproxy->check_req_len = 0;
 			curproxy->options2 &= ~PR_O2_CHK_ANY;
 			curproxy->options2 |= PR_O2_SSL3_CHK;
 		}
@@ -3792,23 +3803,24 @@ stats_error_parsing:
 			/* use SMTP request to check servers' health */
 			free(curproxy->check_req);
 			curproxy->check_req = NULL;
+			curproxy->check_req_len = 0;
 			curproxy->options2 &= ~PR_O2_CHK_ANY;
 			curproxy->options2 |= PR_O2_SMTP_CHK;
 
 			if (!*args[2] || !*args[3]) { /* no argument or incomplete EHLO host */
 				curproxy->check_req = strdup(DEF_SMTP_CHECK_REQ); /* default request */
-				curproxy->check_len = strlen(DEF_SMTP_CHECK_REQ);
+				curproxy->check_req_len = strlen(DEF_SMTP_CHECK_REQ);
 			} else { /* ESMTP EHLO, or SMTP HELO, and a hostname */
 				if (!strcmp(args[2], "EHLO") || !strcmp(args[2], "HELO")) {
 					int reqlen = strlen(args[2]) + strlen(args[3]) + strlen(" \r\n") + 1;
 					curproxy->check_req = (char *)malloc(reqlen);
-					curproxy->check_len = snprintf(curproxy->check_req, reqlen,
+					curproxy->check_req_len = snprintf(curproxy->check_req, reqlen,
 								       "%s %s\r\n", args[2], args[3]); /* HELO hostname */
 				} else {
 					/* this just hits the default for now, but you could potentially expand it to allow for other stuff
 					   though, it's unlikely you'd want to send anything other than an EHLO or HELO */
 					curproxy->check_req = strdup(DEF_SMTP_CHECK_REQ); /* default request */
-					curproxy->check_len = strlen(DEF_SMTP_CHECK_REQ);
+					curproxy->check_req_len = strlen(DEF_SMTP_CHECK_REQ);
 				}
 			}
 		}
@@ -3819,6 +3831,7 @@ stats_error_parsing:
 
 			free(curproxy->check_req);
 			curproxy->check_req = NULL;
+			curproxy->check_req_len = 0;
 			curproxy->options2 &= ~PR_O2_CHK_ANY;
 			curproxy->options2 |= PR_O2_PGSQL_CHK;
 
@@ -3855,7 +3868,7 @@ stats_error_parsing:
 
 						free(curproxy->check_req);
 						curproxy->check_req = packet;
-						curproxy->check_len = packet_len;
+						curproxy->check_req_len = packet_len;
 
 						packet_len = htonl(packet_len);
 						memcpy(packet, &packet_len, 4);
@@ -3878,12 +3891,13 @@ stats_error_parsing:
 
 			free(curproxy->check_req);
 			curproxy->check_req = NULL;
+			curproxy->check_req_len = 0;
 			curproxy->options2 &= ~PR_O2_CHK_ANY;
 			curproxy->options2 |= PR_O2_REDIS_CHK;
 
 			curproxy->check_req = (char *) malloc(sizeof(DEF_REDIS_CHECK_REQ) - 1);
 			memcpy(curproxy->check_req, DEF_REDIS_CHECK_REQ, sizeof(DEF_REDIS_CHECK_REQ) - 1);
-			curproxy->check_len = sizeof(DEF_REDIS_CHECK_REQ) - 1;
+			curproxy->check_req_len = sizeof(DEF_REDIS_CHECK_REQ) - 1;
 		}
 
 		else if (!strcmp(args[1], "mysql-check")) {
@@ -3893,6 +3907,7 @@ stats_error_parsing:
 
 			free(curproxy->check_req);
 			curproxy->check_req = NULL;
+			curproxy->check_req_len = 0;
 			curproxy->options2 &= ~PR_O2_CHK_ANY;
 			curproxy->options2 |= PR_O2_MYSQL_CHK;
 
@@ -3952,7 +3967,7 @@ stats_error_parsing:
 
 								free(curproxy->check_req);
 								curproxy->check_req = (char *)calloc(1, reqlen);
-								curproxy->check_len = reqlen;
+								curproxy->check_req_len = reqlen;
 
 								snprintf(curproxy->check_req, 4, "%c%c%c",
 									((unsigned char) packetlen & 0xff),
@@ -3978,7 +3993,7 @@ stats_error_parsing:
 
 							free(curproxy->check_req);
 							curproxy->check_req = (char *)calloc(1, reqlen);
-							curproxy->check_len = reqlen;
+							curproxy->check_req_len = reqlen;
 
 							snprintf(curproxy->check_req, 4, "%c%c%c",
 								((unsigned char) packetlen & 0xff),
@@ -4007,12 +4022,13 @@ stats_error_parsing:
 			/* use LDAP request to check servers' health */
 			free(curproxy->check_req);
 			curproxy->check_req = NULL;
+			curproxy->check_req_len = 0;
 			curproxy->options2 &= ~PR_O2_CHK_ANY;
 			curproxy->options2 |= PR_O2_LDAP_CHK;
 
 			curproxy->check_req = (char *) malloc(sizeof(DEF_LDAP_CHECK_REQ) - 1);
 			memcpy(curproxy->check_req, DEF_LDAP_CHECK_REQ, sizeof(DEF_LDAP_CHECK_REQ) - 1);
-			curproxy->check_len = sizeof(DEF_LDAP_CHECK_REQ) - 1;
+			curproxy->check_req_len = sizeof(DEF_LDAP_CHECK_REQ) - 1;
 		}
 		else if (!strcmp(args[1], "tcp-check")) {
 			/* use raw TCPCHK send/expect to check servers' health */
@@ -4021,6 +4037,7 @@ stats_error_parsing:
 
 			free(curproxy->check_req);
 			curproxy->check_req = NULL;
+			curproxy->check_req_len = 0;
 			curproxy->options2 &= ~PR_O2_CHK_ANY;
 			curproxy->options2 |= PR_O2_TCPCHK_CHK;
 		}
@@ -4028,7 +4045,7 @@ stats_error_parsing:
 			int cur_arg;
 
 			/* insert x-forwarded-for field, but not for the IP address listed as an except.
-			 * set default options (ie: bitfield, header name, etc) 
+			 * set default options (ie: bitfield, header name, etc)
 			 */
 
 			curproxy->options |= PR_O_FWDFOR | PR_O_FF_ALWAYS;
@@ -4268,8 +4285,65 @@ stats_error_parsing:
 				goto out;
 			}
 		}
+		else if (!strcmp(args[1], "server")) {
+
+			/* use a external http check server instead of querying the server for health checks */
+			if (!*args[2]) {
+				Alert("parsing [%s:%d]: '%s' expects an <ipv4|ipv6> address.\n",
+					  file, linenum, args[1]);
+				err_code |= ERR_ALERT | ERR_FATAL;
+				goto out;
+			}
+
+			struct sockaddr_storage *sk;
+			int port1, port2;
+			struct protocol *proto;
+
+			sk = str2sa_range(args[2], &port1, &port2, &errmsg, NULL);
+			if (!sk) {
+				Alert("parsing [%s:%d] : '%s' : %s\n",
+					  file, linenum, args[2], errmsg);
+				err_code |= ERR_ALERT | ERR_FATAL;
+				goto out;
+			}
+
+			proto = protocol_by_family(sk->ss_family);
+			if (!proto || !proto->connect) {
+				Alert("parsing [%s:%d] : '%s %s' : connect() not supported for this address family.\n",
+					  file, linenum, args[1], args[2]);
+				err_code |= ERR_ALERT | ERR_FATAL;
+				goto out;
+			}
+
+			if (port1 != port2) {
+				Alert("parsing [%s:%d] : '%s' : port ranges and offsets are not allowed in '%s'\n",
+					  file, linenum, args[1], args[2]);
+				err_code |= ERR_ALERT | ERR_FATAL;
+				goto out;
+			}
+
+			if (port1)
+				set_host_port(sk, port1);
+
+			curproxy->check_addr = *sk;
+		}
+		else if (!strcmp(args[1], "info")) {
+			curproxy->options2 |= PR_O2_CHK_INFO;
+			if (!*args[2]) { /* no argument */
+				curproxy->check_for_hdr_name = strdup(DEF_CHECK_HOST_HDR);
+				curproxy->check_for_hdr_name_len = strlen(DEF_CHECK_HOST_HDR);
+			} else if (*args[2] && !strcmp(args[2], "header")) {
+				curproxy->check_for_hdr_name = strdup(args[3]);
+				curproxy->check_for_hdr_name_len = strlen(args[3]);
+			} else {
+				Alert("parsing [%s:%d] : '%s' : expect valid http header it can be specified using 'header'\n",
+					  file, linenum, args[1]);
+				err_code |= ERR_ALERT | ERR_FATAL;
+				goto out;
+			}
+		}
 		else {
-			Alert("parsing [%s:%d] : '%s' only supports 'disable-on-404', 'send-state', 'expect'.\n", file, linenum, args[0]);
+			Alert("parsing [%s:%d] : '%s' only supports 'disable-on-404', 'send-state', 'expect', 'server', 'info'.\n", file, linenum, args[0]);
 			err_code |= ERR_ALERT | ERR_FATAL;
 			goto out;
 		}
@@ -4801,7 +4875,7 @@ stats_error_parsing:
 				goto out;
 
 			}
-	    
+
 			logsrv->level = 7; /* max syslog level = debug */
 			if (*(args[3])) {
 				logsrv->level = get_log_level(args[3]);
@@ -4870,7 +4944,7 @@ stats_error_parsing:
 			goto out;
 		}
 
-		/* we must first clear any optional default setting */	
+		/* we must first clear any optional default setting */
 		curproxy->conn_src.opts &= ~CO_SRC_TPROXY_MASK;
 		free(curproxy->conn_src.iface_name);
 		curproxy->conn_src.iface_name = NULL;
@@ -5272,7 +5346,7 @@ stats_error_parsing:
 			err_code |= ERR_ALERT | ERR_FATAL;
 			goto out;
 		}
-	
+
 		if ((strcmp(args[2], "if") == 0 || strcmp(args[2], "unless") == 0)) {
 			if ((cond = build_acl_cond(file, linenum, curproxy, (const char **)args+2, &errmsg)) == NULL) {
 				Alert("parsing [%s:%d] : error detected while parsing a '%s' condition : %s.\n",
@@ -5729,7 +5803,7 @@ int readcfgfile(const char *file)
 		/* skip leading spaces */
 		while (isspace((unsigned char)*line))
 			line++;
-	
+
 		arg = 0;
 		args[arg] = line;
 
@@ -5746,7 +5820,7 @@ int readcfgfile(const char *file)
 				else if (line[1] == 'r') {
 					*line = '\r';
 					skip = 1;
-				} 
+				}
 				else if (line[1] == 'n') {
 					*line = '\n';
 					skip = 1;
@@ -6115,7 +6189,7 @@ int check_config_validity()
 
 		/* find the target proxy in setbe */
 		if (curproxy->mode == PR_MODE_HTTP && curproxy->req_exp != NULL) {
-			/* map jump target for ACT_SETBE in req_rep chain */ 
+			/* map jump target for ACT_SETBE in req_rep chain */
 			struct hdr_exp *exp;
 			for (exp = curproxy->req_exp; exp != NULL; exp = exp->next) {
 				struct proxy *target;
@@ -6525,9 +6599,9 @@ out_uri_auth_compat:
 		}
 
 		if ((curproxy->options2 & PR_O2_CHK_ANY) == PR_O2_SSL3_CHK) {
-			curproxy->check_len = sizeof(sslv3_client_hello_pkt) - 1;
-			curproxy->check_req = (char *)malloc(curproxy->check_len);
-			memcpy(curproxy->check_req, sslv3_client_hello_pkt, curproxy->check_len);
+			curproxy->check_req_len = sizeof(sslv3_client_hello_pkt) - 1;
+			curproxy->check_req = (char *)malloc(curproxy->check_req_len);
+			memcpy(curproxy->check_req, sslv3_client_hello_pkt, curproxy->check_req_len);
 		}
 
 		if (!LIST_ISEMPTY(&curproxy->tcpcheck_rules) &&
diff --git a/src/checks.c b/src/checks.c
index f3b2b54..b5d8185 100644
--- a/src/checks.c
+++ b/src/checks.c
@@ -466,7 +466,7 @@ void __health_adjust(struct server *s, short status)
 	}
 }
 
-static int httpchk_build_status_header(struct server *s, char *buffer, int size)
+static int httpchk_build_headers(struct server *s, char *buffer, int size)
 {
 	int sv_state;
 	int ratio;
@@ -476,48 +476,55 @@ static int httpchk_build_status_header(struct server *s, char *buffer, int size)
 				      "NOLB %d/%d", "NOLB",
 				      "no check" };
 
-	memcpy(buffer + hlen, "X-Haproxy-Server-State: ", 24);
-	hlen += 24;
+	if (s->proxy->options2 & PR_O2_CHK_INFO) {
+		hlen += s->proxy->check_for_hdr_name_len + strlen(": ") + s->check_for_hdr_val_len + strlen("\r\n");
+		sprintf(buffer, "%s: %s\r\n", s->proxy->check_for_hdr_name, s->check_for_hdr_val);
+	}
 
-	if (!(s->check.state & CHK_ST_ENABLED))
-		sv_state = 6;
-	else if (s->state != SRV_ST_STOPPED) {
-		if (s->check.health == s->check.rise + s->check.fall - 1)
-			sv_state = 3; /* UP */
-		else
-			sv_state = 2; /* going down */
+	if (s->proxy->options2 & PR_O2_CHK_SNDST) {
+		memcpy(buffer + hlen, "X-Haproxy-Server-State: ", 24);
+		hlen += 24;
 
-		if (s->state == SRV_ST_STOPPING)
-			sv_state += 2;
-	} else {
-		if (s->check.health)
-			sv_state = 1; /* going up */
-		else
-			sv_state = 0; /* DOWN */
-	}
+		if (!(s->check.state & CHK_ST_ENABLED))
+			sv_state = 6;
+		else if (s->state != SRV_ST_STOPPED) {
+			if (s->check.health == s->check.rise + s->check.fall - 1)
+				sv_state = 3; /* UP */
+			else
+				sv_state = 2; /* going down */
 
-	hlen += snprintf(buffer + hlen, size - hlen,
-			     srv_hlt_st[sv_state],
-			     (s->state != SRV_ST_STOPPED) ? (s->check.health - s->check.rise + 1) : (s->check.health),
-			     (s->state != SRV_ST_STOPPED) ? (s->check.fall) : (s->check.rise));
-
-	hlen += snprintf(buffer + hlen,  size - hlen, "; name=%s/%s; node=%s; weight=%d/%d; scur=%d/%d; qcur=%d",
-			     s->proxy->id, s->id,
-			     global.node,
-			     (s->eweight * s->proxy->lbprm.wmult + s->proxy->lbprm.wdiv - 1) / s->proxy->lbprm.wdiv,
-			     (s->proxy->lbprm.tot_weight * s->proxy->lbprm.wmult + s->proxy->lbprm.wdiv - 1) / s->proxy->lbprm.wdiv,
-			     s->cur_sess, s->proxy->beconn - s->proxy->nbpend,
-			     s->nbpend);
-
-	if ((s->state == SRV_ST_STARTING) &&
-	    now.tv_sec < s->last_change + s->slowstart &&
-	    now.tv_sec >= s->last_change) {
-		ratio = MAX(1, 100 * (now.tv_sec - s->last_change) / s->slowstart);
-		hlen += snprintf(buffer + hlen, size - hlen, "; throttle=%d%%", ratio);
-	}
+			if (s->state == SRV_ST_STOPPING)
+				sv_state += 2;
+		} else {
+			if (s->check.health)
+				sv_state = 1; /* going up */
+			else
+				sv_state = 0; /* DOWN */
+		}
+
+		hlen += snprintf(buffer + hlen, size - hlen,
+				     srv_hlt_st[sv_state],
+				     (s->state != SRV_ST_STOPPED) ? (s->check.health - s->check.rise + 1) : (s->check.health),
+				     (s->state != SRV_ST_STOPPED) ? (s->check.fall) : (s->check.rise));
+
+		hlen += snprintf(buffer + hlen,  size - hlen, "; name=%s/%s; node=%s; weight=%d/%d; scur=%d/%d; qcur=%d",
+				     s->proxy->id, s->id,
+				     global.node,
+				     (s->eweight * s->proxy->lbprm.wmult + s->proxy->lbprm.wdiv - 1) / s->proxy->lbprm.wdiv,
+				     (s->proxy->lbprm.tot_weight * s->proxy->lbprm.wmult + s->proxy->lbprm.wdiv - 1) / s->proxy->lbprm.wdiv,
+				     s->cur_sess, s->proxy->beconn - s->proxy->nbpend,
+				     s->nbpend);
+
+		if ((s->state == SRV_ST_STARTING) &&
+		    now.tv_sec < s->last_change + s->slowstart &&
+		    now.tv_sec >= s->last_change) {
+			ratio = MAX(1, 100 * (now.tv_sec - s->last_change) / s->slowstart);
+			hlen += snprintf(buffer + hlen, size - hlen, "; throttle=%d%%", ratio);
+		}
 
-	buffer[hlen++] = '\r';
-	buffer[hlen++] = '\n';
+		buffer[hlen++] = '\r';
+		buffer[hlen++] = '\n';
+	}
 
 	return hlen;
 }
@@ -818,7 +825,7 @@ static void event_srv_chk_r(struct connection *conn)
 
 		check->code = str2uic(check->bi->data + 9);
 		desc = ltrim(check->bi->data + 12, ' ');
-		
+
 		if ((s->proxy->options & PR_O_DISABLE404) &&
 			 (s->state != SRV_ST_STOPPED) && (check->code == 404)) {
 			/* 404 may be accepted as "stopping" only if the server was up */
@@ -1102,7 +1109,7 @@ static void event_srv_chk_r(struct connection *conn)
 		if (!done && check->bi->i < 5)
 			goto wait_more_data;
 
-		if (s->proxy->check_len == 0) { // old mode
+		if (s->proxy->check_req_len == 0) { // old mode
 			if (*(check->bi->data + 4) != '\xff') {
 				/* We set the MySQL Version in description for information purpose
 				 * FIXME : it can be cool to use MySQL Version for other purpose,
@@ -1372,6 +1379,7 @@ static int connect_chk(struct task *t)
 	struct connection *conn = check->conn;
 	struct protocol *proto;
 	int ret;
+	int hlen = 0;
 
 	/* tcpcheck send/expect initialisation */
 	if (check->type == PR_O2_TCPCHK_CHK)
@@ -1384,7 +1392,7 @@ static int connect_chk(struct task *t)
 	 * its own strings.
 	 */
 	if (check->type && check->type != PR_O2_TCPCHK_CHK && !(check->state & CHK_ST_AGENT)) {
-		bo_putblk(check->bo, s->proxy->check_req, s->proxy->check_len);
+		bo_putblk(check->bo, s->proxy->check_req, s->proxy->check_req_len);
 
 		/* we want to check if this host replies to HTTP or SSLv3 requests
 		 * so we'll send the request, and won't wake the checker up now.
@@ -1395,8 +1403,10 @@ static int connect_chk(struct task *t)
 			memcpy(check->bo->data + 11, &gmt_time, 4);
 		}
 		else if ((check->type) == PR_O2_HTTP_CHK) {
-			if (s->proxy->options2 & PR_O2_CHK_SNDST)
-				bo_putblk(check->bo, trash.str, httpchk_build_status_header(s, trash.str, trash.size));
+			/* set up the http request with headers correctly */
+			hlen = httpchk_build_headers(s, trash.str);
+			if (hlen)
+				bo_putblk(check->bo, trash.str, hlen);
 			bo_putstr(check->bo, "\r\n");
 			*check->bo->p = '\0'; /* to make gdb output easier to read */
 		}
@@ -1418,9 +1428,12 @@ static int connect_chk(struct task *t)
 		proto = s->check_common.proto;
 	}
 	else {
-		/* we'll connect to the addr on the server */
-		conn->addr.to = s->addr;
-		proto = s->proto;
+		if ((check->type) == PR_O2_HTTP_CHK && is_addr(&s->proxy->check_addr))
+			/* we will connect to the check addr specified on the proxy, only http checks*/
+			conn->addr.to = s->proxy->check_addr;
+		else
+			/* we'll connect to the addr on the server */
+			conn->addr.to = s->addr;
 	}
 
 	if (check->port) {
diff --git a/src/server.c b/src/server.c
index fdb63cc..95ba792 100644
--- a/src/server.c
+++ b/src/server.c
@@ -888,6 +888,8 @@ int parse_server(const char *file, int linenum, char **args, struct proxy *curpr
 			newsrv->state = SRV_ST_RUNNING; /* early server setup */
 			newsrv->last_change = now.tv_sec;
 			newsrv->id = strdup(args[1]);
+			newsrv->check_for_hdr_val = strdup(args[1]);
+			newsrv->check_for_hdr_val_len = strlen(args[1]);
 
 			/* several ways to check the port component :
 			 *  - IP    => port=+0, relative (IPv4 only)
@@ -1140,6 +1142,11 @@ int parse_server(const char *file, int linenum, char **args, struct proxy *curpr
 				newsrv->check_common.proto = protocol_by_family(sk->ss_family);
 				cur_arg += 2;
 			}
+			else if (!strcmp(args[cur_arg], "info")) {
+				newsrv->check_for_hdr_val = strdup(args[cur_arg + 1]);
+				newsrv->check_for_hdr_val_len = strlen(args[cur_arg + 1]);
+				cur_arg += 2;
+			}
 			else if (!strcmp(args[cur_arg], "port")) {
 				newsrv->check.port = atol(args[cur_arg + 1]);
 				cur_arg += 2;
@@ -1581,7 +1588,7 @@ int parse_server(const char *file, int linenum, char **args, struct proxy *curpr
 			 * same as for the production traffic. Otherwise we use raw_sock by
 			 * default, unless one is specified.
 			 */
-			if (!newsrv->check.port && !is_addr(&newsrv->check_common.addr)) {
+			if (!newsrv->check.port && !is_addr(&newsrv->check_common.addr) && !is_addr(&curproxy->check_addr)) {
 #ifdef USE_OPENSSL
 				newsrv->check.use_ssl |= (newsrv->use_ssl || (newsrv->proxy->options & PR_O_TCPCHK_SSL));
 #endif
@@ -1591,12 +1598,16 @@ int parse_server(const char *file, int linenum, char **args, struct proxy *curpr
 			if (!newsrv->check.port)
 				newsrv->check.port = get_host_port(&newsrv->check_common.addr);
 
+			/* try to set the port from proxy check address if check.port not set */
+			if (!newsrv->check.port)
+				newsrv->check.port = get_host_port(&curproxy->check_addr);
+
 			if (!newsrv->check.port)
 				newsrv->check.port = realport; /* by default */
 
 			if (!newsrv->check.port) {
 				/* not yet valid, because no port was set on
-				 * the server either. We'll check if we have
+				 * the server or check address. We'll check if we have
 				 * a known port on the first listener.
 				 */
 				struct listener *l;
-- 
2.0.1

